create table "public"."InstagramPosts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "post_url" character varying,
    "status" text default 'processing'::text,
    "post_id" character varying,
    "notion_page_id" character varying,
    "time_to_post" timestamp with time zone,
    "media_type" text,
    "caption" character varying,
    "media_urls" character varying[] not null default '{}'::character varying[],
    "access_token" character varying,
    "instagram_account_id" character varying
);


create table "public"."SocialAccounts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "social_id" character varying not null,
    "social_platform" text,
    "access_token" character varying,
    "username" text,
    "user_id" uuid
);


create table "public"."Users" (
    "created_at" timestamp with time zone default now(),
    "stripe_subscription_status" text default ''::text,
    "notion_access_token" text,
    "notion_bot_id" character varying,
    "notion_duplicated_template_id" character varying,
    "notion_owner" json,
    "notion_workspace_icon" character varying,
    "notion_workspace_id" character varying,
    "notion_workspace_name" character varying,
    "email" character varying,
    "id" uuid not null,
    "stripe_checkout_session_id" character varying,
    "stripe_customer_id" character varying,
    "stripe_subscription_id" character varying,
    "stripe_price_id" character varying
);


CREATE UNIQUE INDEX "Posts_pkey" ON public."InstagramPosts" USING btree (id);

CREATE UNIQUE INDEX "SocialAccounts_pkey" ON public."SocialAccounts" USING btree (id, social_id);

CREATE UNIQUE INDEX "Users_pkey" ON public."Users" USING btree (id);

alter table "public"."InstagramPosts" add constraint "Posts_pkey" PRIMARY KEY using index "Posts_pkey";

alter table "public"."SocialAccounts" add constraint "SocialAccounts_pkey" PRIMARY KEY using index "SocialAccounts_pkey";

alter table "public"."Users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."InstagramPosts" add constraint "InstagramPosts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."InstagramPosts" validate constraint "InstagramPosts_user_id_fkey";

alter table "public"."SocialAccounts" add constraint "SocialAccounts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "Users"(id) not valid;

alter table "public"."SocialAccounts" validate constraint "SocialAccounts_user_id_fkey";

alter table "public"."Users" add constraint "Users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."Users" validate constraint "Users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_profile_for_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
  BEGIN
    INSERT INTO public."Users" (id)
    VALUES (NEW.id);
    RETURN NEW;
  END;
  $function$
;


